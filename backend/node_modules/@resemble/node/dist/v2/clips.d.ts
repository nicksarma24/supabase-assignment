import { ErrorResponseV2, PaginationResponseV2, ReadResponseV2, WriteResponseV2 } from './util';
export interface Clip {
    uuid: string;
    title: string;
    body: string;
    voice_uuid: string;
    is_public: boolean;
    is_archived: boolean;
    timestamps?: any;
    audio_src?: string;
    raw_audio?: any;
    created_at: Date;
    updated_at: Date;
}
interface ClipInput {
    title?: string;
    body: string;
    voice_uuid: string;
    is_public: boolean;
    is_archived: boolean;
    sample_rate?: 16000 | 22050 | 44100;
    output_format?: 'wav' | 'mp3';
    precision?: 'PCM_16' | 'PCM_32';
    include_timestamps?: boolean;
}
export interface SyncClipInput extends ClipInput {
    raw?: boolean;
}
export interface AsyncClipInput extends ClipInput {
    callback_uri: string;
}
export interface DirectClipInput {
    voice_uuid: string;
    project_uuid: string;
    title?: string;
    data: string;
    precision?: 'MULAW' | 'PCM_16' | 'PCM_24' | 'PCM_32';
    output_format?: 'wav' | 'mp3';
}
export interface DirectClip {
    success: true;
    audio_content: string;
    audio_timestamps: {
        graph_chars: string[];
        graph_times: [number, number][];
        phon_chars: string[];
        phon_times: [number, number][];
    };
    duration: number;
    synth_duration: number;
    output_format: 'wav' | 'mp3';
    sample_rate: number;
    issues: string[];
}
export interface DirectClipError {
    success: false;
    issues?: string[];
    error_name: string;
    error_params: unknown;
    feedback_uuid: string;
    message: string;
}
export interface StreamInput {
    data: string;
    project_uuid: string;
    voice_uuid: string;
    sample_rate?: 8000 | 16000 | 22050 | 44100 | 32000;
    precision?: 'MULAW' | 'PCM_16' | 'PCM_32';
}
export interface StreamConfig {
    bufferSize?: number;
    ignoreWavHeader?: boolean;
    getTimeStamps?: boolean;
}
declare const _default: {
    all: (projectUuid: string, page: number, pageSize: number) => Promise<PaginationResponseV2<Clip> | ErrorResponseV2>;
    get: (projectUuid: string, uuid: string) => Promise<ReadResponseV2<Clip> | ErrorResponseV2>;
    createAsync: (projectUuid: string, clipInput: AsyncClipInput) => Promise<WriteResponseV2<Clip> | ErrorResponseV2>;
    createSync: (projectUuid: string, clipInput: SyncClipInput) => Promise<WriteResponseV2<Clip> | ErrorResponseV2>;
    createDirect: (clipInput: DirectClipInput) => Promise<DirectClip | DirectClipError | ErrorResponseV2>;
    stream: (streamInput: StreamInput, streamConfig?: StreamConfig) => AsyncGenerator;
    updateAsync: (projectUuid: string, uuid: string, clipInput: AsyncClipInput) => Promise<any>;
    destroy: (projectUuid: string, uuid: string) => Promise<any>;
};
export default _default;
